#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('passport-mongo:server');
var config = require('../config.json');
var fs = require('fs');
var path = require('path');

// Set environment
process.env.PORT = config.port;

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
console.log('Using port: ' + port);
app.set('port', port);

/**
 * Create server.
 */
var server, redirectServer;

// https
if (config.privateKey) {
	server = httpsServer(app);
	redirectServer = httpRedirectServer();

// http
} else {
	server = httpServer(app);
}

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Make http server
 */
function httpServer (app) {
	var http = require('http');
	return http.createServer(app);
}

// Redirect from http port 80 to https
function httpRedirectServer () {
	var http = require('http');
	return http.createServer(function (req, res) {
		res.writeHead(301, { "Location": "https://" + req.headers['host'] + req.url });
		res.end();
	}).listen(80);
}

function httpsServer (app) {

	var https = require('https');

	var key = fs.readFileSync(dir(config.privateKey));
	var certificate = fs.readFileSync(dir(config.certificate));
	var ca = config.ca.map(function (crt) {
		return fs.readFileSync(dir(crt));
	});

	return https.createServer({
		key: key,
		cert: certificate,
		ca: ca
	}, app);
}

function dir (file) {
	return path.resolve(__dirname, file);
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
